% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMFStrategy-class.R,
%   R/NMFStrategyFunction-class.R, R/NMFStrategyIterative-class.R,
%   R/NMFStrategyOctave-class.R
\name{NMFStrategy}
\alias{NMFStrategy}
\alias{NMFStrategy,character,function-method}
\alias{NMFStrategy,character,NMFStrategy-method}
\alias{NMFStrategy,NMFStrategy,missing-method}
\alias{NMFStrategy,missing,character-method}
\alias{NMFStrategy,NULL,NMFStrategy-method}
\alias{NMFStrategy,character,character-method}
\alias{NMFStrategy,NULL,character-method}
\alias{NMFStrategy,character,missing-method}
\alias{run,NMFStrategy,mMatrix,NMFfit-method}
\alias{run,NMFStrategy,mMatrix,NMF-method}
\alias{run,NMFStrategyFunction,matrix,NMFfit-method}
\alias{run,NMFStrategyIterative,mMatrix,NMFfit-method}
\alias{run,NMFStrategyIterativeX,mMatrix,NMFfit-method}
\alias{run,NMFStrategyOctave,matrix,NMFfit-method}
\title{Factory Method for NMFStrategy Objects}
\usage{
NMFStrategy(name, method, ...)

\S4method{NMFStrategy}{character,`function`}(name, method, ...)

\S4method{NMFStrategy}{character,NMFStrategy}(name, method, ...)

\S4method{NMFStrategy}{NMFStrategy,missing}(name, method, ...)

\S4method{NMFStrategy}{missing,character}(name, method, ...)

\S4method{NMFStrategy}{`NULL`,NMFStrategy}(name, method, ...)

\S4method{NMFStrategy}{character,character}(name, method, ...)

\S4method{NMFStrategy}{`NULL`,character}(name, method, ...)

\S4method{NMFStrategy}{character,missing}(name, method, ...)

\S4method{run}{NMFStrategy,mMatrix,NMFfit}(object, y, x, ...)

\S4method{run}{NMFStrategy,mMatrix,NMF}(object, y, x, ...)

\S4method{run}{NMFStrategyFunction,matrix,NMFfit}(object, y, x, ...)

\S4method{run}{NMFStrategyIterative,mMatrix,NMFfit}(
  object,
  y,
  x,
  .stop = NULL,
  maxIter = nmf.getOption("maxIter") \%||\% 2000L,
  ...
)

\S4method{run}{NMFStrategyIterativeX,mMatrix,NMFfit}(object, y, x, maxIter, ...)

\S4method{run}{NMFStrategyOctave,matrix,NMFfit}(object, y, x, ...)
}
\arguments{
\item{name}{name/key of an NMF algorithm.}

\item{method}{definition of the algorithm}

\item{...}{extra arguments passed to \code{\link{new}}.}

\item{.stop}{specification of a stopping criterion, that is used instead of the
one associated to the NMF algorithm.
It may be specified as:
\itemize{
\item the access key of a registered stopping criterion;
\item a single integer that specifies the exact number of iterations to perform, which will
be honoured unless a lower value is explicitly passed in argument \code{maxIter}.
\item a single numeric value that specifies the stationnarity threshold for the
objective function, used in with \code{\link{nmf.stop.stationary}};
\item a function with signature \code{(object="NMFStrategy", i="integer", y="matrix", x="NMF", ...)},
where \code{object} is the \code{NMFStrategy} object that describes the algorithm being run,
\code{i} is the current iteration, \code{y} is the target matrix and \code{x} is the current value of
the NMF model.
}}

\item{maxIter}{maximum number of iterations to perform.}
}
\description{
Creates NMFStrategy objects that wraps implementation of NMF algorithms into
a unified interface.

It throws an error if called directly.

This method is usually not called directly, but only via the function \code{\link{nmf}}, which
takes care of many other details such as seeding the computation, handling RNG settings, or setting up
parallelisation.

This method is usually not called directly, but only via the function \code{\link{nmf}}, which
takes care of many other details such as seeding the computation, handling RNG settings,
or setting up parallel computations.
}
\section{Methods (by generic)}{
\itemize{
\item \code{NMFStrategy(name = character,method = function)}: Creates an \code{NMFStrategyFunction} object that wraps the function \code{method}
into a unified interface.

\code{method} must be a function with signature \code{(y="matrix", x="NMFfit", ...)},
and return an object of class \code{\linkS4class{NMFfit}}.

\item \code{NMFStrategy(name = character,method = NMFStrategy)}: Creates an \code{NMFStrategy} object based on a template object (Constructor-Copy).

\item \code{NMFStrategy(name = NMFStrategy,method = missing)}: Creates an \code{NMFStrategy} based on a template object (Constructor-Copy),
in particular it uses the \strong{same} name.

\item \code{NMFStrategy(name = missing,method = character)}: Creates an \code{NMFStrategy} based on a registered NMF algorithm that is used
as a template (Constructor-Copy), in particular it uses the \strong{same} name.

It is a shortcut for \code{NMFStrategy(nmfAlgorithm(method, exact=TRUE), ...)}.

\item \code{NMFStrategy(name = NULL,method = NMFStrategy)}: Creates an \code{NMFStrategy} based on a template object (Constructor-Copy)
but using a randomly generated name.

\item \code{NMFStrategy(name = character,method = character)}: Creates an \code{NMFStrategy} based on a registered NMF algorithm that is used
as a template.

\item \code{NMFStrategy(name = NULL,method = character)}: Creates an \code{NMFStrategy} based on a registered NMF algorithm (Constructor-Copy)
using a randomly generated name.

It is a shortcut for \code{NMFStrategy(NULL, nmfAlgorithm(method), ...)}.

\item \code{NMFStrategy(name = character,method = missing)}: Creates an NMFStrategy, determining its type from the extra arguments passed
in \code{...}: if there is an argument named \code{Update} then an
\code{NMFStrategyIterative} is created, or if there is an argument
named \code{algorithm} then an \code{NMFStrategyFunction} is created.
Calls other than these generates an error.
}}

